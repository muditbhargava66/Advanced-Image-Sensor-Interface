"""Type stubs for CuPy library."""

from collections.abc import Sequence
from typing import Any, Optional, Union

import numpy as np
from numpy.typing import DTypeLike, NDArray

# CuPy array type
class ndarray:
    def __init__(self, shape: Sequence[int], dtype: DTypeLike = ...) -> None: ...
    def get(self) -> NDArray[Any]: ...
    def __array__(self) -> NDArray[Any]: ...
    def __getitem__(self, key: Any) -> ndarray: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    @property
    def shape(self) -> tuple[int, ...]: ...
    @property
    def dtype(self) -> np.dtype[Any]: ...
    @property
    def size(self) -> int: ...

# Array creation functions
def array(obj: Any, dtype: Optional[DTypeLike] = ..., copy: bool = ...) -> ndarray: ...
def asarray(a: Any, dtype: Optional[DTypeLike] = ...) -> ndarray: ...
def zeros(shape: Union[int, Sequence[int]], dtype: DTypeLike = ...) -> ndarray: ...
def ones(shape: Union[int, Sequence[int]], dtype: DTypeLike = ...) -> ndarray: ...
def empty(shape: Union[int, Sequence[int]], dtype: DTypeLike = ...) -> ndarray: ...

# Mathematical functions
def sum(a: ndarray, axis: Optional[Union[int, tuple[int, ...]]] = ...) -> Union[ndarray, Any]: ...
def mean(a: ndarray, axis: Optional[Union[int, tuple[int, ...]]] = ...) -> Union[ndarray, Any]: ...
def std(a: ndarray, axis: Optional[Union[int, tuple[int, ...]]] = ...) -> Union[ndarray, Any]: ...
def max(a: ndarray, axis: Optional[Union[int, tuple[int, ...]]] = ...) -> Union[ndarray, Any]: ...
def min(a: ndarray, axis: Optional[Union[int, tuple[int, ...]]] = ...) -> Union[ndarray, Any]: ...

# Linear algebra
def dot(a: ndarray, b: ndarray) -> ndarray: ...
def matmul(a: ndarray, b: ndarray) -> ndarray: ...

# FFT functions
def fft2(a: ndarray) -> ndarray: ...
def ifft2(a: ndarray) -> ndarray: ...

# Device management
def cuda_runtime_version() -> int: ...
def get_default_memory_pool() -> Any: ...
def __getattr__(name: str) -> Any: ...
