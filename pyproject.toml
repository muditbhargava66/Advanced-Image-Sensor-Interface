[build-system]
requires = ["setuptools>=67.0", "setuptools_scm>=8.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "advanced_image_sensor_interface"
version = "2.0.0"
description = "A high-performance interface for next-generation camera modules"
readme = "README.md"
authors = [{ name = "Mudit Bhargava", email = "muditbhargava666@gmail.com" }]
license = { file = "LICENSE" }
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Operating System :: POSIX :: Linux",
    "Intended Audience :: Science/Research"
]
keywords = ["image processing", "sensor interface", "camera", "MIPI"]
dependencies = [
    "numpy>=1.23.5",
    "scipy>=1.10.0",
    "matplotlib>=3.7.0",
    "Pillow>=10.0.0",
    "tqdm>=4.66.0",
    "psutil>=5.9.0",
]
requires-python = ">=3.10"

[project.optional-dependencies]
# Core dependencies for basic functionality
core = [
    "numpy>=1.23.5",
    "scipy>=1.10.0",
    "matplotlib>=3.7.0",
    "Pillow>=10.0.0",
    "tqdm>=4.66.0",
    "psutil>=5.9.0",
]

# Full feature set with heavy dependencies
full = [
    "opencv-python>=4.8.1",
    "pandas>=2.1.0",
    "scikit-learn>=1.3.0",
    "scikit-image>=0.20.0",
]

# Development dependencies
dev = [
    "pytest-asyncio>=0.23.0",
    "pytest>=8.0.2",
    "pytest-cov>=4.1.0",
    "mypy>=1.6.0",
    "ruff>=0.4.0",
    "black>=23.10.0",
    "pyright>=1.1.320",
    "tox>=4.0.0",
    "ipython>=8.18.0",
]

# Documentation dependencies
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.25.0",
    "myst-parser>=2.0.0",
    "sphinx-copybutton>=0.5.2",
    "sphinxcontrib-mermaid>=0.9.2",
    "sphinx-design>=0.5.0",
    "nbsphinx>=0.9.0",
]

# Performance testing dependencies
performance = [
    "memory-profiler>=0.60.0",
    "line-profiler>=4.0.0",
    "py-spy>=0.3.14",
]

[project.urls]
Homepage = "https://github.com/muditbhargava66/Advanced-Image-Sensor-Interface"
Documentation = "https://advanced-image-sensor-interface.readthedocs.io/"
Repository = "https://github.com/muditbhargava66/Advanced-Image-Sensor-Interface.git"
Changelog = "https://github.com/muditbhargava66/Advanced-Image-Sensor-Interface/releases"
Issues = "https://github.com/muditbhargava66/Advanced-Image-Sensor-Interface/issues"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["advanced_image_sensor_interface*"]

[tool.pytest.ini_options]
addopts = "-v"
testpaths = ["tests"]
filterwarnings = ["ignore::pytest.PytestDeprecationWarning"]

[tool.mypy]
python_version = "3.10"
strict = true
check_untyped_defs = true
disallow_any_generics = true
disallow_any_unimported = true
disallow_any_expr = false  # Too strict for numpy
disallow_any_decorated = false  # Too strict for dataclasses
disallow_any_explicit = false  # Allow explicit Any when needed
disallow_subclassing_any = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
no_implicit_optional = true
strict_optional = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]

# Per-module options
[[tool.mypy.overrides]]
module = "numpy.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "scipy.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "sklearn.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "matplotlib.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "cv2.*"
ignore_missing_imports = true

[tool.black]
line-length = 130
target-version = ["py310", "py311", "py312", "py313"]
skip_magic_trailing_comma = true

[tool.isort]
profile = "black"
line_length = 130
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.ruff]
line-length = 130
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",   # Pycodestyle
    "F",   # Pyflakes
    "W",   # Pycodestyle warnings
    "UP",  # Pyupgrade
    "PL",  # Pylint
    "RUF", # Ruff-specific
    "I"    # Isort
]

# Global ignores
ignore = [
    "D",    # Disable all pydocstyle rules
    "PLR2004",  # Magic numbers (common in tests)
    "B006", # Mutable defaults (enable later)
    "E501", # Line length (handled by formatter)
    "UP038",
    "UP007",
    "E712",
    # Acceptable complexity for domain-specific functions
    "PLR0911",  # Too many return statements
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments (SecurityLimits constructor)
    # Configuration management globals are acceptable
    "PLW0603",  # Global statement usage
    # Import organization and placement
    "PLC0415", # Import should be at top-level (acceptable for optional deps)
    "I001",    # Import block formatting (handled by formatter)
    # Performance optimizations (acceptable for readability)
    "PLR1730", # Replace if with max/min call
]

# Directory-specific ignores
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["ALL"]
"tests/**/*.py" = [
    "D1", "PLR2004", "F841", "I001", "PLC0415"
]
"benchmarks/**/*.py" = ["D1", "B006"]
"scripts/**/*.py" = ["D1", "PLR2004"]
"examples/**/*.py" = [
    "F401",  # Unused imports in examples (might be used by users)
    "D1", "PLR2004"
]
"src/advanced_image_sensor_interface/sensor_interface/gpu_acceleration.py" = [
    "F401",  # Optional dependency imports (numba)
]

[tool.pyright]
include = ["src", "tests"]
exclude = ["**/__pycache__", "**/.*"]
pythonVersion = "3.10"
pythonPlatform = "Linux"
typeCheckingMode = "strict"
reportMissingImports = true
reportMissingTypeStubs = false
reportImportCycles = true
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportPrivateUsage = "warning"
reportConstantRedefinition = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportUntypedFunctionDecorator = false  # Too strict for common decorators
reportUntypedClassDecorator = false
reportUntypedBaseClass = true
reportUntypedNamedTuple = true
reportCallInDefaultInitializer = true
reportUnnecessaryIsInstance = true
reportUnnecessaryCast = true
reportAssertAlwaysTrue = true
reportSelfClsParameterName = true
reportImplicitStringConcatenation = true