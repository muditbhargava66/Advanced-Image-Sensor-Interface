name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          # If you rely on requirements files, cache on them:
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            requirements-docs.txt
            pyproject.toml
            setup.cfg
            setup.py

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-glx libglib2.0-0

      - name: Upgrade pip and wheel
        run: python -m pip install --upgrade pip wheel

      - name: Install base requirements.txt (if present)
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Install dev requirements (if present)
        run: |
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          fi

      - name: Editable install with extras
        run: |
          # Keep this after requirements to ensure extras overlay cleanly
          if [ -f pyproject.toml ] || [ -f setup.py ]; then
            # Install dev and docs extras if defined
            pip install -e ".[dev,docs]"
          fi

      - name: Ensure CI tools present (fallback)
        run: |
          pip install -q "ruff>=0.4.0" "black>=23.0" "mypy>=1.8" "pyright>=1.1.350" "pytest>=7.0" "pytest-cov>=4.0"

      - name: Ruff lint
        run: ruff check src tests

      - name: Black format check
        run: black --check src tests

      - name: Type check with mypy
        run: mypy src

      - name: Type check with pyright
        run: pyright src

      - name: Run tests
        env:
          PYTHONWARNINGS: default
        run: |
          pytest tests/ -v \
            --maxfail=1 --disable-warnings \
            --cov=src --cov-report=xml --cov-report=term-missing --color=yes

      - name: Upload coverage XML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml-${{ matrix.python-version }}
          path: coverage.xml
          if-no-files-found: warn
          retention-days: 7

  benchmark:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            pyproject.toml
            setup.cfg
            setup.py

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-glx libglib2.0-0

      - name: Upgrade pip and wheel
        run: python -m pip install --upgrade pip wheel

      - name: Install base and dev requirements
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          fi
          if [ -f pyproject.toml ] || [ -f setup.py ]; then
            pip install -e ".[dev]"
          fi
          pip install -q psutil

      - name: Run performance benchmarks
        run: |
          python benchmarks/speed_tests.py --output benchmark_results.json

      - name: Upload benchmark results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark_results.json
          if-no-files-found: warn
          retention-days: 7

  docs:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-docs.txt
            docs/requirements.txt
            pyproject.toml
            setup.cfg
            setup.py

      - name: Upgrade pip and wheel
        run: python -m pip install --upgrade pip wheel

      - name: Install docs requirements
        run: |
          if [ -f docs/requirements.txt ]; then
            pip install -r docs/requirements.txt
          fi
          if [ -f requirements-docs.txt ]; then
            pip install -r requirements-docs.txt
          fi
          if [ -f pyproject.toml ] || [ -f setup.py ]; then
            pip install -e ".[docs]"
          fi

      - name: Build documentation
        run: |
          set -e
          if [ -f docs/Makefile ]; then
            make -C docs html
          else
            sphinx-build -b html docs docs/_build/html
          fi

      - name: Upload documentation
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/_build/html/
          if-no-files-found: error
          retention-days: 7
